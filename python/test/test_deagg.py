# Kinesis Aggregation/Deaggregation Libraries for Python
#
# Copyright 2014, Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Amazon Software License (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
# http://aws.amazon.com/asl/
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

from __future__ import print_function
import aws_kinesis_agg.deaggregator as deagg
import base64
import json
import unittest

# This is an aggregated record generated by the actual KPL library
# (see com.amazonaws.kinesis.producer.SampleKPLProducer in the Java part of this project)
kpl_generated_rec = {
    "kinesis": {
        "kinesisSchemaVersion": "1.0",
        "partitionKey": "a",
        "sequenceNumber": "49581544954143914480256700934210366840104395343224897586",
        "data": "84mawgokZmMwM2RkODgtM2U3OS00NDhhLWIwMWEtN2NmMWJkNDdiNzg0CiRjYWU0MWIxYy1lYTYxLTQzZjItOTBiZS1iODc1NWViZj"
                "g4ZTIKJGQ0OTA2OTBjLWU3NGQtNGRiMi1hM2M4LWQ4ZjJmMTg0ZmQyMwokYzkyNGJjMDktYjg1ZS00N2YxLWIzMmUtMzM2NTIyZWU1"
                "M2M4EiYzODQ4NjQ5NTg2NzUwODM5OTA3ODE1OTcyMzg0NjA1MTgwNzAyMBInMTkzNzg3NjAwMDM3NjgxNzA2OTUyMTQzMzU3MDcxOT"
                "E2MzUyNjA0EicyNjY4ODA0MzY5NjQ5MzI0MjQyNjU0NjY5MTY3MzQwNjg2ODQ0MzkSJzMzOTYwNjYwMDk0Mjk2NzM5MTg1NDYwMzU1"
                "MjQwMjAyMTg0NzI5MhomCAAQABogUkVDT1JEIDIyIHBlZW9iaGN6YnpkbXNrYm91cGd5cQoaJggBEAEaIFJFQ09SRCAyMyB1c3dreG"
                "Z0eHJvZXVzc2N4c2pobm8KGiYIAhACGiBSRUNPUkQgMjQgY2FzZWhkZ2l2ZmF4ZXVzdGx5c3p5ChomCAMQAxogUkVDT1JEIDI1IG52"
                "ZmZ2cG11b2dkb3BqaGFtZXZyawpRwVPQ3go0yp4Y6kvM0q3V",
        "approximateArrivalTimestamp": 1518133507.063
    },
    "eventSource": "aws:kinesis",
    "eventVersion": "1.0",
    "eventID": "shardId-000000000003:49581544954143914480256700934210366840104395343224897586",
    "eventName": "aws:kinesis:record",
    "invokeIdentityArn": "arn:aws:iam::857565855790:role/service-role/Python27KinesisDeaggregatorRole",
    "awsRegion": "us-east-1",
    "eventSourceARN": "arn:aws:kinesis:us-east-1:857565855790:stream/AggRecordStream"
}


class RecordDeaggregatorTest(unittest.TestCase):

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_deagg_with_real_kpl_data(self):

        # Each entry is of the form (pk, ehk, data) and corresponds to the expected results
        actual_user_records = [
            {'partitionKey':'fc03dd88-3e79-448a-b01a-7cf1bd47b784',
             'explicitHashKey':'38486495867508399078159723846051807020',
             'data':'RECORD 22 peeobhczbzdmskboupgyq\n'
            },
            {'partitionKey':'cae41b1c-ea61-43f2-90be-b8755ebf88e2',
             'explicitHashKey':'193787600037681706952143357071916352604',
            'data':'RECORD 23 uswkxftxroeusscxsjhno\n'
            },
            {'partitionKey':'d490690c-e74d-4db2-a3c8-d8f2f184fd23',
             'explicitHashKey':'266880436964932424265466916734068684439',
            'data':'RECORD 24 casehdgivfaxeustlyszy\n'
            },
            {'partitionKey':'c924bc09-b85e-47f1-b32e-336522ee53c8',
             'explicitHashKey':'339606600942967391854603552402021847292',
            'data':'RECORD 25 nvffvpmuogdopjhamevrk\n'
            }
        ]

        records = deagg.deaggregate_records(json.loads(json.dumps(kpl_generated_rec)))

        self.assertEqual(4, len(records),
                         'Deaggregated the wrong number of records aggregated record.')

        for i in range(0, len(records)):
            generated_record = records[i]
            actual_record = actual_user_records[i]

            self.assertEqual(generated_record['kinesis']['partitionKey'], actual_record['partitionKey'],
                             'Actual and generated partition keys do not match for record %d' % i)
            self.assertEqual(generated_record['kinesis']['explicitHashKey'], actual_record['explicitHashKey'],
                             'Actual and generated explicit hash keys do not match for record %d' % i)

            # Decode base64 to bytes and decode bytes to utf-8
            decoded_data = base64.b64decode(generated_record['kinesis']['data']).decode('utf-8')
            actual_data = actual_record['data']
            self.assertEqual(decoded_data, actual_data,
                             'Deaggregated data does not match expected actual data.')


if __name__ == '__main__':

    unittest.main()